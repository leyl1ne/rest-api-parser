// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	models "github.com/leyl1ne/rest-api-parser/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// SongSaver is an autogenerated mock type for the SongSaver type
type SongSaver struct {
	mock.Mock
}

// SaveSong provides a mock function with given fields: song
func (_m *SongSaver) SaveSong(song models.Song) (int64, error) {
	ret := _m.Called(song)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Song) (int64, error)); ok {
		return rf(song)
	}
	if rf, ok := ret.Get(0).(func(models.Song) int64); ok {
		r0 = rf(song)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(models.Song) error); ok {
		r1 = rf(song)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSongSaver interface {
	mock.TestingT
	Cleanup(func())
}

// NewSongSaver creates a new instance of SongSaver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSongSaver(t mockConstructorTestingTNewSongSaver) *SongSaver {
	mock := &SongSaver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
