// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	models "github.com/leyl1ne/rest-api-parser/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// SongGetter is an autogenerated mock type for the SongGetter type
type SongGetter struct {
	mock.Mock
}

// GetSong provides a mock function with given fields: id
func (_m *SongGetter) GetSong(id int) (models.Song, error) {
	ret := _m.Called(id)

	var r0 models.Song
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (models.Song, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) models.Song); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Song)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSongGetter interface {
	mock.TestingT
	Cleanup(func())
}

// NewSongGetter creates a new instance of SongGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSongGetter(t mockConstructorTestingTNewSongGetter) *SongGetter {
	mock := &SongGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
